#!/usr/bin/env python
# encoding: utf-8
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
import os
import sys
from waflib import Context
from waflib.TaskGen import extension, subst_pc

class subst_h(subst_pc):
    pass

@extension('.h.in')
def add_hfile(self, node):
    tsk = self.create_task('subst_h', node, node.change_ext('.h'))
    self.bld.install_files('${PREFIX}/include/pixman-1', tsk.outputs)

bld(target='pixman-version.h',
    source='pixman-version.h.in')

if sys.platform == 'win32':
    CMD_QUOTE = '"'#extra quotes for win32, see Frederic's reply on http://groups.google.com/group/comp.lang.python/browse_thread/thread/775ca566af9a70c2/65504296a27b43d5?lnk=gst&q=subprocess+windows+spaces#65504296a27b43d5 or try 'cmd /?' to see how " is interpreted by 'cmd.exe'
else:
    CMD_QUOTE = ''

bld(target='pixman-combine32.c',
    source=['make-combine.pl', 'pixman-combine.c.template'],
    rule=CMD_QUOTE + r'"${PERL}" "${SRC[0].bldpath()}" 8 < "${SRC[1].bldpath()}" > "${TGT[0].bldpath()}"' + CMD_QUOTE)
bld(target='pixman-combine32.h',
    source=['make-combine.pl', 'pixman-combine.h.template'],
    rule=CMD_QUOTE + r'"${PERL}" "${SRC[0].bldpath()}" 8 < "${SRC[1].bldpath()}" > "${TGT[0].bldpath()}"' + CMD_QUOTE)
bld(target='pixman-combine64.c',
    source=['make-combine.pl', 'pixman-combine.c.template'],
    rule=CMD_QUOTE + r'"${PERL}" "${SRC[0].bldpath()}" 16 < "${SRC[1].bldpath()}" > "${TGT[0].bldpath()}"' + CMD_QUOTE)
bld(target='pixman-combine64.h',
    source=['make-combine.pl', 'pixman-combine.h.template'],
    rule=CMD_QUOTE + r'"${PERL}" "${SRC[0].bldpath()}" 16 < "${SRC[1].bldpath()}" > "${TGT[0].bldpath()}"' + CMD_QUOTE)

local_libs = []

env = bld.env.derive()
env.append_value('INCLUDES', [bld.out_dir, '.'])
env.append_value('DEFINES', 'HAVE_CONFIG_H')
bld.set_env('default', env)

if bld.is_defined('USE_MMX'):
    bld.stlib(target='pixman-mmx',
              source=' \
                      pixman-mmx.c',
              use='MMX')
    local_libs.append('pixman-mmx')

if bld.is_defined('USE_SSE2'):
    bld.stlib(target='pixman-sse2',
              source=' \
                      pixman-sse2.c',
              use='SSE2')
    local_libs.append('pixman-sse2')

if bld.is_defined('USE_VMX'):
    bld.stlib(target='pixman-vmx',
              source=' \
                      pixman-vmx.c',
              use='VMX')
    local_libs.append('pixman-vmx')

if bld.is_defined('USE_ARM_SIMD'):
    bld.stlib(target='pixman-arm-simd',
              source=' \
                      pixman-arm-simd.c \
                      pixman-arm-simd-asm.S',
              use='ARM_SIMD')
    local_libs.append('pixman-arm-simd')

if bld.is_defined('USE_ARM_NEON'):
    bld.stlib(target='pixman-arm-neon',
              source=' \
                      pixman-arm-neon.c \
                      pixman-arm-neon-asm.S',
              use='ARM_NEON')
    local_libs.append('pixman-arm-neon')

Context.load_tool('syms')

bld.shlib(target='pixman-1',
          vnum='%s.%s.%s' % (bld.env.PIXMAN_VERSION_MAJOR[0],
                              bld.env.PIXMAN_VERSION_MINOR[0],
                              bld.env.PIXMAN_VERSION_MICRO[0]),
          source = '\
                  pixman-access.c				\
                  pixman-access-accessors.c		\
                  pixman-cpu.c				\
                  pixman-gradient-walker.c		\
                  pixman-region16.c			\
                  pixman-region32.c			\
                  pixman-image.c				\
                  pixman-implementation.c			\
                  pixman-combine32.c			\
                  pixman-combine64.c			\
                  pixman-general.c			\
                  pixman.c				\
                  pixman-fast-path.c			\
                  pixman-solid-fill.c			\
                  pixman-conical-gradient.c		\
                  pixman-linear-gradient.c		\
                  pixman-radial-gradient.c		\
                  pixman-bits-image.c			\
                  pixman-utils.c				\
                  pixman-edge.c				\
                  pixman-edge-accessors.c			\
                  pixman-trap.c				\
                  pixman-timer.c				\
                  pixman-matrix.c',
          uselib_local = local_libs,
          use=['PTHREAD', 'M'],
          features='syms',
          export_symbols_regex='pixman_.*')
bld.install_files('${PREFIX}/include/pixman-1', 'pixman.h')
bld.set_env('default', bld.env.parent)
